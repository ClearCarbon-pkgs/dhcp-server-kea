`configure' configures kea 2.4.1 to adapt to many kinds of systems.

Usage: ./configure [OPTION]... [VAR=VALUE]...

To assign environment variables (e.g., CC, CFLAGS...), specify them as
VAR=VALUE.  See below for descriptions of some of the useful variables.

Defaults for the options are specified in brackets.

Configuration:
  -h, --help              display this help and exit
      --help=short        display options specific to this package
      --help=recursive    display the short help of all the included packages
  -V, --version           display version information and exit
  -q, --quiet, --silent   do not print `checking ...' messages
      --cache-file=FILE   cache test results in FILE [disabled]
  -C, --config-cache      alias for `--cache-file=config.cache'
  -n, --no-create         do not create output files
      --srcdir=DIR        find the sources in DIR [configure dir or `..']

Installation directories:
  --prefix=PREFIX         install architecture-independent files in PREFIX
                          [/usr/local]
  --exec-prefix=EPREFIX   install architecture-dependent files in EPREFIX
                          [PREFIX]

By default, `make install' will install all the files in
`/usr/local/bin', `/usr/local/lib' etc.  You can specify
an installation prefix other than `/usr/local' using `--prefix',
for instance `--prefix=$HOME'.

For better control, use the options below.

Fine tuning of the installation directories:
  --bindir=DIR            user executables [EPREFIX/bin]
  --sbindir=DIR           system admin executables [EPREFIX/sbin]
  --libexecdir=DIR        program executables [EPREFIX/libexec]
  --sysconfdir=DIR        read-only single-machine data [PREFIX/etc]
  --sharedstatedir=DIR    modifiable architecture-independent data [PREFIX/com]
  --localstatedir=DIR     modifiable single-machine data [PREFIX/var]
  --runstatedir=DIR       modifiable per-process data [LOCALSTATEDIR/run]
  --libdir=DIR            object code libraries [EPREFIX/lib]
  --includedir=DIR        C header files [PREFIX/include]
  --oldincludedir=DIR     C header files for non-gcc [/usr/include]
  --datarootdir=DIR       read-only arch.-independent data root [PREFIX/share]
  --datadir=DIR           read-only architecture-independent data [DATAROOTDIR]
  --infodir=DIR           info documentation [DATAROOTDIR/info]
  --localedir=DIR         locale-dependent data [DATAROOTDIR/locale]
  --mandir=DIR            man documentation [DATAROOTDIR/man]
  --docdir=DIR            documentation root [DATAROOTDIR/doc/kea]
  --htmldir=DIR           html documentation [DOCDIR]
  --dvidir=DIR            dvi documentation [DOCDIR]
  --pdfdir=DIR            pdf documentation [DOCDIR]
  --psdir=DIR             ps documentation [DOCDIR]

Program names:
  --program-prefix=PREFIX            prepend PREFIX to installed program names
  --program-suffix=SUFFIX            append SUFFIX to installed program names
  --program-transform-name=PROGRAM   run sed PROGRAM on installed program names

System types:
  --build=BUILD     configure for building on BUILD [guessed]
  --host=HOST       cross-compile to build programs to run on HOST [BUILD]

Optional Features:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --enable-silent-rules   less verbose build output (undo: "make V=1")
  --disable-silent-rules  verbose build output (undo: "make V=0")
  --enable-dependency-tracking
                          do not reject slow dependency extractors
  --disable-dependency-tracking
                          speeds up one-time build
  --enable-debug          enable debugging (default is no)
  --enable-shared[=PKGS]  build shared libraries [default=yes]
  --enable-static[=PKGS]  build static libraries [default=yes]
  --enable-fast-install[=PKGS]
                          optimize for fast installation [default=yes]
  --disable-libtool-lock  avoid locking (might break parallel builds)
  --disable-rpath         don't hardcode library path into binaries
  --enable-static-link    build programs with static link [[default=no]]
  --enable-perfdhcp       enable perfdhcp, a DHCP benchmarking tool
                          [default=no]
  --enable-pgsql-ssl      enable OpenSSL support in PostgreSQL [default=yes]
  --enable-boost-headers-only
                          Build with boost headers only rather than link with
                          boost_system library. This is NOT recommended as it
                          may result in non-optimized code on some platforms
                          or introduce runtime errors on others.
  --enable-generate-messages
                          indicates that the messages files will be
                          regenerated. [default=no]
  --enable-generate-parser
                          indicates that the parsers will be regenerated. This
                          implies that the bison and flex are required
                          [default=no]
  --enable-shell          enable kea-shell, a text management client for
                          Control Agent [default=no]
  --enable-generate-docs  regenerate documentation using Sphinx [default=no]
  --disable-install-configurations
                          do not install configuration
  --enable-logger-checks  check logger messages [default=no]
  --enable-fuzzing        indicates that the code will be built with AFL
                          (American Fuzzy Lop) support. Code built this way is
                          unusable as a regular server. [default=no]

Optional Packages:
  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
  --with-pic[=PKGS]       try to use only PIC/non-PIC objects [default=use
                          both]
  --with-aix-soname=aix|svr4|both
                          shared library versioning (aka "SONAME") variant to
                          provide on AIX, [default=aix].
  --with-gnu-ld           assume the C compiler uses GNU ld [default=no]
  --with-sysroot[=DIR]    Search for dependent libraries within DIR (or the
                          compiler's sysroot if not specified).
  --with-werror           Compile using -Werror (default=no)
  --with-libyang[=PATH]   optional path to the libyang installation directory
  --with-libyang-cpp[=PATH]
                          optional path to the libyang-cpp installation
                          directory
  --with-sysrepo[=PATH]   optional path to the sysrepo installation directory
  --with-sysrepo-cpp[=PATH]
                          optional path to the sysrepo-cpp installation
                          directory
  --with-gtest-source[=PATH]
                          location of the Googletest source
  --with-gtest[=PATH]     specify a path to gtest header files (PATH/include)
                          and library (PATH/lib)
  --with-lcov[=PROGRAM]   enable gtest and coverage target using the specified
                          lcov
  --with-openssl[=PATH]   Enables OpenSSL, location can be specified
                          optionally
  --with-botan-config=PATH
                          specify the path to the botan-config script
  --with-mysql[=PATH]     path to the MySQL 'mysql_config' script (MySQL is
                          used for the DHCP database)

  --with-pgsql[=PATH]     path to the PostgreSQL 'pg_config' script
  --with-log4cplus[=PATH] optional path to the log4cplus installation
                          directory
  --with-boost-include=PATH
                          specify exact directory for Boost headers
  --with-boost-libs=SPEC  specify Boost libraries to link with, e.g.,
                          '-lboost_system'
  --with-boost-lib-dir=PATH
                          specify directory where to find Boost libraries
  --with-site-packages    place to install Kea Python module
  --with-sphinx=PATH      path to sphinx-build tool
  --with-pdflatex=PATH    path to pdflatex tool
  --with-gssapi[=PATH]    optionally specify the path to a krb5-config file

Some influential environment variables:
  CXX         C++ compiler command
  CXXFLAGS    C++ compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  CXXCPP      C++ preprocessor
  CC          C compiler command
  CFLAGS      C compiler flags
  LT_SYS_LIBRARY_PATH
              User-defined run-time library search path.
  CPP         C preprocessor
  PYTHON      the Python interpreter
  runstatedir $localstatedir/run for autoconf < 2.70

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.